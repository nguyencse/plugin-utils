import 'dart:async';

import 'package:equatable/equatable.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:$$$package_name/features/$$$feature_name/domain/entities/$$$feature_name_entity.dart';
import 'package:$$$package_name/features/$$$feature_name/domain/usecases/fetch_$$$feature_name_usecase.dart';

part '$$$feature_name_event.dart';
part '$$$feature_name_state.dart';

class PDBloc extends Bloc<PDEvent, PDState> {
  final Fetch$$$FeatureNameUseCase fetch$$$FeatureNameUseCase;

  PDBloc({
    required Fetch$$$FeatureNameUseCase fetch$$$FeatureNameUseCase
  })  : this.fetch$$$FeatureNameUseCase = fetch$$$FeatureNameUseCase,
        super(PDState(status: PDStateStatus.init));

  @override
  Stream<PDState> mapEventToState(PDEvent event) async* {
    if (event is EventFetch$$$FeatureName) {
      yield* _handleFetchPD(event);
    }
  }

  Stream<PDState> _handleFetchPD(EventFetch$$$FeatureName event) async* {
    yield state.copyWith(status: PDStateStatus.loading);

    final dataPD = await fetch$$$FeatureNameUseCase(FetchPDParams(id: event.id));

    yield state.copyWith(status: PDStateStatus.hide_loading);

    yield dataPD.fold(
      (failure) => state.copyWith(status: PDStateStatus.loaded_failed, errorMessage: 'Có lỗi xảy ra. Vui lòng thử lại.'),
      (detail) => state.copyWith(status: PDStateStatus.loaded_success, detail: detail),
    );
  }
}
