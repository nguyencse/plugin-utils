import 'package:dartz/dartz.dart';
import 'package:$$$package_name/features/$$$feature_name/core/error/failures.dart';
import 'package:$$$package_name/features/$$$feature_name/core/usecases/usecase.dart';
import 'package:$$$package_name/features/$$$feature_name/domain/entities/$$$feature_name_entity.dart';
import 'package:$$$package_name/features/$$$feature_name/domain/repositories/$$$feature_name_repository.dart';

class Fetch$$$FeatureNameUseCase extends UseCase<$$$FeatureNameEntity, FetchPDParams> {
  final $$$FeatureNameRepository repository;

  Fetch$$$FeatureNameUseCase(this.repository);

  @override
  Future<Either<OGPDFailure, $$$FeatureNameEntity>> call(FetchPDParams params) async {
    return await repository.fetch$$$FeatureName(params: params);
  }
}

class FetchPDParams {
  String id;
  FetchPDParams({required this.id});
}
